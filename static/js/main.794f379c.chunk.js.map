{"version":3,"sources":["Redux/Language/LangActionType.js","Redux/Language/LangAction.js","Components/Navbar.js","Redux/Applicants/ApplicantsActiontypes.js","Redux/Applicants/ApplicantsActions.js","Pages/Applicants.js","Pages/Dates.js","Redux/Applicants/ApplicantsReducer.js","Redux/Language/LangReducer.js","Redux/RootReducer.js","Redux/Store.js","App.js","reportWebVitals.js","index.js"],"names":["CHANGE_LANG","changeLang","lang","dispatch","localStorage","setItem","type","payload","text","require","Navbar","props","checklang","language","setState","en","ar","onChange","e","changeLanguage","preventDefault","target","id","showSidebar","sidebar","state","previousProps","previousState","this","Provider","value","color","className","to","onClick","Applicants","dates","Component","connect","withRouter","FETCH_APPLICANTS_REQUEST","FETCH_APPLICANTS_SUCCESS","FETCH_APPLICANTS_FAILURE","fetchApplicantsRequest","fetchApplicants","axios","get","then","res","console","log","data","applicants","fetchApplicantsSuccess","catch","error","errorMsg","message","fetchApplicantsFailure","handleChangePage","event","newPage","page","handleChangeRowsPerPage","rowsPerPage","window","scrollTo","Paper","style","width","TableContainer","height","Table","stickyHeader","aria-label","TableHead","TableRow","TableCell","align","name","status","email","TableBody","applicantsData","loading","map","applicant","username","TablePagination","rowsPerPageOptions","component","count","length","onChangePage","onChangeRowsPerPage","Dates","initialState","reducer","action","rootReducer","combineReducers","applicantReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","chosenLanguage","App","dir","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"wPAAaA,EAAc,cCEdC,EAAa,SAAAC,GAAI,OAAI,SAAAC,GACjCC,aAAaC,QAAQ,iBAAkBH,GACvCC,EAAS,CAAEG,KAAMN,EAAaO,QAASL,MCSlCM,EAAOC,EAAQ,IAGfC,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IASRC,UAAY,WACkB,OAAxB,EAAKD,MAAME,SACb,EAAKC,SAAS,CAAEN,KAAMA,EAAKO,KAE3B,EAAKD,SAAS,CAAEN,KAAMA,EAAKQ,MAdd,EA8BjBC,SAAW,SAAAC,GACT,OAAO,EAAKC,eAAeD,IA/BZ,EAiCjBC,eAAiB,SAAAD,GACfA,EAAEE,iBACF,EAAKT,MAAMV,WAAWiB,EAAEG,OAAOC,KAnChB,EA0ClBC,YAAa,WACR,EAAKT,SAAS,CAACU,SAAW,EAAKC,MAAMD,WAxCvC,EAAKC,MAAQ,CACXD,SAAQ,EACRhB,KAAMA,EAAKO,IALE,E,+DAmBEW,EAAeC,GAC5BD,IAAkBE,KAAKjB,QACG,OAAxBiB,KAAKjB,MAAME,SACbe,KAAKd,SAAS,CAAEN,KAAMA,EAAKQ,KAE3BY,KAAKd,SAAS,CAAEN,KAAMA,EAAKO,Q,0CAc/Ba,KAAKhB,c,+BASX,OACI,mCACA,eAAC,IAAYiB,SAAb,CAAsBC,MAAO,CAAEC,MAAO,QAAtC,UACF,sBAAKC,UAAU,SAAf,UAEA,cAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,YAAvB,SACE,cAAC,IAAD,CAAgBE,QAASN,KAAKL,gBAGrB,sBAAKS,UAAU,WAAf,UACC,cAAC,IAAD,CACEA,UAAmC,OAAxBJ,KAAKjB,MAAME,SAAoB,WAAa,GACvDS,GAAG,KACHY,QAASN,KAAKX,SAHhB,gBAQA,cAAC,IAAD,CACEe,UAAmC,OAAxBJ,KAAKjB,MAAME,SAAoB,WAAa,GACvDqB,QAASN,KAAKX,SACdK,GAAG,KAHL,sBAUhB,qBAAKU,UAAWJ,KAAKH,MAAMD,QAAU,kBAAoB,WAAzD,SACA,qBAAIQ,UAAU,iBAAiBE,QAASN,KAAKL,YAA7C,UACE,oBAAIS,UAAU,gBAAd,SACE,cAAC,IAAD,CAAMA,UAAU,eAAhB,SACA,mCAAK,cAAC,IAAD,IAAL,mBAA0C,cAAC,IAAD,WAM9B,oBAAIA,UAAU,WAAd,SACE,eAAC,IAAD,CAAMC,GAAG,IAAT,UACA,cAAC,IAAD,IACE,+BAAQL,KAAKH,MAAMjB,KAAK2B,kBAK5B,oBAAIH,UAAU,WAAd,SACE,eAAC,IAAD,CAAMC,GAAG,QAAT,UACA,cAAC,IAAD,IACE,+BAAQL,KAAKH,MAAMjB,KAAK4B,2B,GAjGvBC,aAqHJC,eAJS,SAAAb,GAAK,MAAK,CAChCZ,SAAUY,EAAMvB,KAAKW,YAGiB,CAAEZ,cAA3BqC,CAAyCC,YAAW7B,ICnIxD8B,EAA2B,2BAC3BC,EAA2B,2BAC3BC,EAA2B,2B,iBCIzBC,EAAyB,WACpC,MAAO,CACLrC,KAAOkC,IAoBEI,EAAkB,WAC7B,OAAO,SAACzC,GACNA,EAASwC,GAETE,IACGC,IAAI,8CAEJC,MAAK,SAACC,GACLC,QAAQC,IAAIF,EAAIG,KAAM,cACtB,IAAMC,EAAaJ,EAAIG,KACvBhD,EAzBuB,SAACiD,GAC9B,MAAO,CACL9C,KAAOmC,EACPlC,QAAS6C,GAsBIC,CAAuBD,OAGjCE,OAAM,SAACC,GACN,IAAMC,EAAWD,EAAME,QACvBtD,EAvBuB,SAACoD,GAC9B,MAAO,CACLjD,KAAOoC,EACPnC,QAASgD,GAoBIG,CAAuBF,S,wEC9BpChD,EAAOC,EAAQ,IAGf0B,E,kDAEF,WAAYxB,GAAO,IAAD,8BACf,cAAMA,IAUVgD,iBAAmB,SAACC,EAAOC,GAC1B,EAAK/C,SAAS,CAACgD,KAAKD,KAZF,EAenBE,wBAA0B,SAACH,GAE1B,EAAK9C,SAAS,CAACkD,aAAaJ,EAAMvC,OAAOS,QACzC,EAAKhB,SAAS,CAACgD,KAAK,KAlBF,EAyBpBlD,UAAY,WACkB,OAAxB,EAAKD,MAAME,SACb,EAAKC,SAAS,CAAEN,KAAMA,EAAKO,KAE3B,EAAKD,SAAS,CAAEN,KAAMA,EAAKQ,MA7BX,EA2CpBG,eAAiB,SAAAD,GACfA,EAAEE,iBACF,EAAKT,MAAMV,WAAWiB,EAAEG,OAAOC,KA3C5B,EAAKG,MAAM,CACVqC,KAAK,EACLE,YAAY,GACZxD,KAAMA,EAAKO,IALG,E,+DAiCDW,EAAeC,GAC5BD,IAAkBE,KAAKjB,QACG,OAAxBiB,KAAKjB,MAAME,SACbe,KAAKd,SAAS,CAAEN,KAAMA,EAAKQ,KAE3BY,KAAKd,SAAS,CAAEN,KAAMA,EAAKO,Q,0CAW/BkD,OAAOC,SAAS,EAAG,GACnBtC,KAAKjB,MAAMiC,kBACXhB,KAAKhB,c,+BAIP,OACE,qBAAKoB,UAAU,aAAf,SACE,eAACmC,EAAA,EAAD,CAAQC,MAAO,CAACC,MAAO,OAAvB,UACA,cAACC,EAAA,EAAD,CAAgBF,MAAO,CAAEG,OAAQ,SAAjC,SACE,eAACC,EAAA,EAAD,CAAOC,cAAY,EAACC,aAAW,eAA/B,UACC,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAWC,MAAM,SAAjB,cAA4BlD,KAAKH,MAAMjB,KAAKuE,QAC5C,eAACF,EAAA,EAAD,CAAWC,MAAM,SAAjB,cAA4BlD,KAAKH,MAAMjB,KAAKwE,UAC5C,cAACH,EAAA,EAAD,CAAWC,MAAM,SAAjB,SAA2BlD,KAAKH,MAAMjB,KAAKyE,aAI/C,cAACC,EAAA,EAAD,UACQtD,KAAKjB,MAAMwE,eAAeC,QACvB,yCACExD,KAAKjB,MAAMwE,eAAe5B,MAC5B,6BAAK3B,KAAKjB,MAAMwE,eAAe5B,QAE/B3B,KAAKjB,MAAMwE,gBACXvD,KAAKjB,MAAMwE,eAAe/B,YAC1BxB,KAAKjB,MAAMwE,eAAe/B,WAAWiC,KAAI,SAAAC,GAAS,OACnD,eAACV,EAAA,EAAD,WACA,cAACC,EAAA,EAAD,CAAWC,MAAM,SAAjB,SAA2BQ,EAAUP,OACrC,cAACF,EAAA,EAAD,CAAWC,MAAM,SAAjB,SAA2BQ,EAAUC,WACrC,cAACV,EAAA,EAAD,CAAWC,MAAM,SAAjB,SAA2BQ,EAAUL,UAHtBK,EAAUhE,cAUvC,cAACkE,EAAA,EAAD,CACEC,mBAAoB,CAAC,GAAI,GAAI,IAC5BC,UAAU,MACVC,MAAO/D,KAAKjB,MAAMwE,eAAe/B,WAAWwC,OAC5C5B,YAAapC,KAAKH,MAAMuC,YACxBF,KAAMlC,KAAKH,MAAMqC,KACjB+B,aAAcjE,KAAK+B,iBACnBmC,oBAAqBlE,KAAKmC,mC,GAhGT1B,aA2HRC,eAbO,SAACb,GACrB,MAAO,CACH0D,eAAgB1D,EAAM2B,WACtBvC,SAAUY,EAAMvB,KAAKW,aAIA,SAACV,GAC1B,MAAO,CACHyC,gBAAiB,kBAAMzC,EAASyC,MAChC3C,WAAW,kBAAKE,EAASF,SAGhBqC,CAA6CC,YAAWJ,ICzHnE3B,EAAOC,EAAQ,IAGfsF,E,kDACF,WAAYpF,GAAQ,IAAD,8BACf,cAAMA,IAORC,UAAY,WACkB,OAAxB,EAAKD,MAAME,SACb,EAAKC,SAAS,CAAEN,KAAMA,EAAKO,KAE3B,EAAKD,SAAS,CAAEN,KAAMA,EAAKQ,MAZd,EA0BjBG,eAAiB,SAAAD,GACfA,EAAEE,iBACF,EAAKT,MAAMV,WAAWiB,EAAEG,OAAOC,KAzB/B,EAAKG,MAAQ,CACXjB,KAAMA,EAAKO,IAJE,E,+DAgBEW,EAAeC,GAC5BD,IAAkBE,KAAKjB,QACG,OAAxBiB,KAAKjB,MAAME,SACbe,KAAKd,SAAS,CAAEN,KAAMA,EAAKQ,KAE3BY,KAAKd,SAAS,CAAEN,KAAMA,EAAKO,Q,0CAW/BkD,OAAOC,SAAS,EAAG,GACnBtC,KAAKhB,c,+BAIP,OACE,qBAAKoB,UAAU,QAAf,SACI,mCAAMJ,KAAKH,MAAMjB,KAAK4B,e,GAxCdC,aA+DCC,eAZO,SAACb,GACrB,MAAO,CACH0D,eAAgB1D,EAAM2B,WACtBvC,SAAUY,EAAMvB,KAAKW,aAIA,SAACV,GAC1B,MAAO,CACHF,WAAW,kBAAKE,EAASF,SAGhBqC,CAA6CC,YAAWwD,I,gCChFrEC,EAAe,CACnBZ,SAAS,EACThC,WAAY,GACZG,MAAO,IAiCI0C,EA9BG,WAAmC,IAAlCxE,EAAiC,uDAAzBuE,EAAcE,EAAW,uCAEhD,OAAQA,EAAO5F,MACX,KAAMkC,EACJ,OAAO,2BACFf,GADL,IAEE2D,SAAS,IAIX,KAAM3C,EACJ,MAAO,CACL2C,SAAS,EACThC,WAAY8C,EAAO3F,QACnBgD,MAAO,IAIjB,KAAMb,EACF,MAAO,CACL0C,SAAS,EACThC,WAAY,GACZG,MAAO2C,EAAO3F,SAGhB,QACF,OAAOkB,ICpCPuE,EAAe,CACnBnF,SAAU,MCSKsF,EANGC,0BAAgB,CAChChD,WAAYiD,EACZnG,KDFW,WAAwC,IAA/BuB,EAA8B,uDAAtBuE,EAAcE,EAAQ,uCACpD,OAAQA,EAAO5F,MACb,KAAKN,EACH,OAAO,2BACFyB,GADL,IAEEZ,SAAUqF,EAAO3F,UAGrB,QACE,OAAOkB,MELE6E,EAFFC,sBAAYJ,EACrBK,8BAAoBC,0BAAgBC,OCGpCtG,aAAauG,gBACfL,EAAMnG,SAASF,EAAWG,aAAauG,iB,IAEnCC,E,kDACJ,WAAYjG,GAAQ,IAAD,8BACjB,cAAMA,IAEDc,MAAQ,CAAEoF,IAAK,OAHH,E,+DAMAnF,EAAeC,GAC5BD,IAAkBE,KAAKjB,QACG,OAAxBiB,KAAKjB,MAAME,SACbe,KAAKd,SAAS,CAAE+F,IAAK,QAErBjF,KAAKd,SAAS,CAAE+F,IAAK,W,+BAKzB,OACA,mCACA,cAAC,IAAD,UACA,sBACM7E,UACE,SAAmC,OAAxBJ,KAAKjB,MAAME,SAAoB,GAAK,cAFvD,UAKA,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOiG,KAAK,IAAIC,OAAK,EAACrB,UAAWvD,IACjC,cAAC,IAAD,CAAO2E,KAAK,QAAQpB,UAAWK,kB,GA5BnB1D,aA2CHC,eAHS,SAAAb,GAAK,MAAK,CAChCZ,SAAUY,EAAMvB,KAAKW,YAEiB,CAAEZ,cAA3BqC,CAAyCsE,GC9CzCI,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBnE,MAAK,YAAkD,IAA/CoE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAASC,OAEP,cAAC,IAAD,CAAUnB,MAAOA,EAAjB,SACM,cAAC,EAAD,MAGNoB,SAASC,eAAe,SAM1BX,M","file":"static/js/main.794f379c.chunk.js","sourcesContent":["export const CHANGE_LANG = 'CHANGE_LANG'\r\nexport const SET_CURRENT_LANG = 'SET_CURRENT_LANG'\r\nexport const GET_ERRORS = 'GET_ERRORS'\r\n\r\n","import { CHANGE_LANG } from './LangActionType';\r\n\r\nexport const changeLang = lang => dispatch => {\r\n\tlocalStorage.setItem('chosenLanguage', lang)\r\n\tdispatch({ type: CHANGE_LANG, payload: lang });\r\n};\r\n","\r\nimport React,{Component} from 'react';\r\nimport * as FaIcons from 'react-icons/fa';\r\nimport * as AiIcons from 'react-icons/ai';\r\nimport '../Stylesheets/Navbar.css';\r\nimport { IconContext } from 'react-icons';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { changeLang } from '../Redux/Language/LangAction';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\nconst text = require('../Lang.json');\r\n\r\n  \r\nclass Navbar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n          sidebar:false,\r\n          text: text.en\r\n        };\r\n      }\r\n\r\n\r\n      checklang = () => {\r\n        if (this.props.language === 'en') {\r\n          this.setState({ text: text.en });\r\n        } else {\r\n          this.setState({ text: text.ar });\r\n        }\r\n      };\r\n\r\n\r\n      componentDidUpdate(previousProps, previousState) {\r\n        if (previousProps !== this.props) {\r\n          if (this.props.language === 'ar') {\r\n            this.setState({ text: text.ar });\r\n          } else {\r\n            this.setState({ text: text.en });\r\n          }\r\n        }\r\n      }\r\n\r\n\r\n      onChange = e => {\r\n        return this.changeLanguage(e);\r\n      };\r\n      changeLanguage = e => {\r\n        e.preventDefault();\r\n        this.props.changeLang(e.target.id);\r\n      };\r\n      componentDidMount() {\r\n        this.checklang();\r\n      }\r\n    \r\n\r\n     showSidebar =() => {\r\n          this.setState({sidebar : !this.state.sidebar})\r\n                        }\r\n\r\nrender(){\r\n  return (\r\n      <>\r\n      <IconContext.Provider value={{ color: '#fff' }}>\r\n    <div className='navbar'>\r\n\r\n    <Link to='#' className='menu-user'>\r\n      <FaIcons.FaUser onClick={this.showSidebar} /> \r\n    </Link>\r\n\r\n               <div className=\"nav-text\">\r\n                <Link\r\n                  className={this.props.language === 'ar' ? 'lanStyle' : ''}\r\n                  id=\"ar\"\r\n                  onClick={this.onChange}\r\n                >\r\n                AR\r\n                </Link>\r\n\r\n                <Link\r\n                  className={this.props.language === 'en' ? 'lanStyle' : ''}\r\n                  onClick={this.onChange}\r\n                  id=\"en\"\r\n                >\r\n                  EN\r\n                </Link>\r\n              </div>\r\n  </div>\r\n\r\n<nav className={this.state.sidebar ? 'nav-menu active' : 'nav-menu'}>\r\n<ul className='nav-menu-items' onClick={this.showSidebar}>\r\n  <li className='navbar-toggle'>\r\n    <Link className=\"admin-toggle\">\r\n    <p>  <FaIcons.FaUserCog /> Admission male <AiIcons.AiOutlineArrowRight/></p>\r\n    \r\n    </Link> \r\n    </li>\r\n\r\n\r\n                <li className=\"nav-text\" >\r\n                  <Link to=\"/\">\r\n                  <FaIcons.FaUsers />\r\n                    <span >{this.state.text.Applicants}</span>\r\n                  </Link>\r\n                </li>\r\n\r\n                \r\n                <li className=\"nav-text\" >\r\n                  <Link to=\"/date\">\r\n                  <FaIcons.FaCalendar />\r\n                    <span >{this.state.text.dates}</span>\r\n                  </Link>\r\n                </li>\r\n  </ul>\r\n\r\n\r\n</nav>\r\n</IconContext.Provider>\r\n</>\r\n  );\r\n}\r\n}\r\nNavbar.propTypes = {\r\n    changeLang: PropTypes.func.isRequired\r\n  };\r\n  \r\n  const mapStateToProps = state => ({\r\n    language: state.lang.language\r\n  });\r\n  \r\n  export default connect(mapStateToProps, { changeLang })(withRouter(Navbar));\r\n","\r\n\r\nexport const FETCH_APPLICANTS_REQUEST = \"FETCH_APPLICANTS_REQUEST\";\r\nexport const FETCH_APPLICANTS_SUCCESS = \"FETCH_APPLICANTS_SUCCESS\";\r\nexport const FETCH_APPLICANTS_FAILURE = \"FETCH_APPLICANTS_FAILURE\";\r\n\r\n\r\n\r\n\r\n\r\n","import {\r\n    FETCH_APPLICANTS_REQUEST,\r\n    FETCH_APPLICANTS_SUCCESS,\r\n    FETCH_APPLICANTS_FAILURE\r\n  } from \"./ApplicantsActiontypes\";\r\n\r\n  import axios from \"axios\";\r\n\r\n  export const fetchApplicantsRequest = () => {\r\n    return {\r\n      type:  FETCH_APPLICANTS_REQUEST,\r\n    };\r\n  };\r\n\r\n\r\n  const fetchApplicantsSuccess = (applicants) => {\r\n    return {\r\n      type:  FETCH_APPLICANTS_SUCCESS,\r\n      payload: applicants,\r\n    };\r\n  };\r\n\r\n  const fetchApplicantsFailure = (error) => {\r\n    return {\r\n      type:  FETCH_APPLICANTS_FAILURE,\r\n      payload: error,\r\n    };\r\n  };\r\n\r\n\r\n  export const fetchApplicants = () => {\r\n    return (dispatch) => {\r\n      dispatch(fetchApplicantsRequest);\r\n  \r\n      axios\r\n        .get(\"https://jsonplaceholder.typicode.com/users\")\r\n  \r\n        .then((res) => {\r\n          console.log(res.data, \"applicants\");\r\n          const applicants = res.data;\r\n          dispatch(fetchApplicantsSuccess(applicants));\r\n        })\r\n  \r\n        .catch((error) => {\r\n          const errorMsg = error.message;\r\n          dispatch(fetchApplicantsFailure(errorMsg));\r\n        });\r\n    };\r\n  };","\r\nimport React, {Component} from \"react\";\r\nimport {fetchApplicants} from '../Redux/Applicants/ApplicantsActions';\r\nimport { connect } from \"react-redux\";\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport {changeLang} from '../Redux/Language/LangAction';\r\nimport { withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nconst text = require('../Lang.json');\r\n\r\n\r\nclass Applicants extends Component {\r\n\r\n    constructor(props){\r\n       super(props)\r\n       this.state={\r\n        page:0,\r\n        rowsPerPage:10,\r\n        text: text.en\r\n       }\r\n    }\r\n\r\n\r\n\r\n   handleChangePage = (event, newPage) => {\r\n    this.setState({page:newPage})\r\n  };\r\n\r\n   handleChangeRowsPerPage = (event) => {\r\n\r\n    this.setState({rowsPerPage:+event.target.value})  \r\n    this.setState({page:0}) \r\n  };\r\n\r\n\r\n\r\n  \r\n\r\n  checklang = () => {\r\n    if (this.props.language === 'en') {\r\n      this.setState({ text: text.en });\r\n    } else {\r\n      this.setState({ text: text.ar });\r\n    }\r\n  };\r\n\r\n  componentDidUpdate(previousProps, previousState) {\r\n    if (previousProps !== this.props) {\r\n      if (this.props.language === 'ar') {\r\n        this.setState({ text: text.ar });\r\n      } else {\r\n        this.setState({ text: text.en });\r\n      }\r\n    }\r\n  }\r\n\r\n  changeLanguage = e => {\r\n    e.preventDefault();\r\n    this.props.changeLang(e.target.id);\r\n  };\r\n\r\n  componentDidMount() {\r\n    window.scrollTo(0, 0);\r\n    this.props.fetchApplicants();\r\n    this.checklang();\r\n  }\r\n  \r\n    render() {\r\n  return (\r\n    <div className=\"applicants\">\r\n      <Paper  style={{width: '80%'}}>\r\n      <TableContainer style={{ height: \"500px\"}}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n         <TableHead>\r\n           <TableRow>\r\n             <TableCell align=\"center\"> {this.state.text.name}</TableCell>\r\n             <TableCell align=\"center\"> {this.state.text.status}</TableCell>\r\n             <TableCell align=\"center\">{this.state.text.email}</TableCell>\r\n           </TableRow>\r\n         </TableHead>\r\n\r\n         <TableBody>\r\n                {this.props.applicantsData.loading ? (\r\n                    <h2>Loading</h2>\r\n                  ) : this.props.applicantsData.error ? (\r\n                    <h2>{this.props.applicantsData.error}</h2>\r\n                  ) : (\r\n                    this.props.applicantsData &&\r\n                    this.props.applicantsData.applicants &&\r\n                    this.props.applicantsData.applicants.map(applicant=>(\r\n                   <TableRow key={applicant.id}>\r\n                   <TableCell align=\"center\">{applicant.name}</TableCell>\r\n                   <TableCell align=\"center\">{applicant.username}</TableCell>\r\n                   <TableCell align=\"center\">{applicant.email}</TableCell>\r\n                 </TableRow>\r\n               )))\r\n             } \r\n         </TableBody>\r\n       </Table>\r\n     </TableContainer>\r\n     <TablePagination\r\n       rowsPerPageOptions={[10, 15, 25]}\r\n        component=\"div\"\r\n        count={this.props.applicantsData.applicants.length}\r\n        rowsPerPage={this.state.rowsPerPage}\r\n        page={this.state.page}\r\n        onChangePage={this.handleChangePage}\r\n        onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n      />\r\n     </Paper>\r\n     \r\n    </div>\r\n  );\r\n}\r\n\r\n}\r\n\r\nApplicants.propTypes = {\r\n    changeLang: PropTypes.func.isRequired\r\n  };\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        applicantsData: state.applicants,\r\n        language: state.lang.language\r\n    };\r\n  };\r\n\r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchApplicants: () => dispatch(fetchApplicants()),\r\n        changeLang:()=> dispatch(changeLang())\r\n    };\r\n  };\r\n  export default connect(mapStateToProps, mapDispatchToProps)(withRouter(Applicants));\r\n","// import React from 'react';\r\n\r\n// function Dates() {\r\n//   return (\r\n//     <div className=\"dates\">\r\n//       Date\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Dates;\r\n\r\n\r\nimport React,{Component} from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { changeLang } from '../Redux/Language/LangAction';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst text = require('../Lang.json');\r\n\r\n  \r\nclass Dates extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n          text: text.en\r\n        };\r\n      }\r\n\r\n      checklang = () => {\r\n        if (this.props.language === 'en') {\r\n          this.setState({ text: text.en });\r\n        } else {\r\n          this.setState({ text: text.ar });\r\n        }\r\n      };\r\n    \r\n      componentDidUpdate(previousProps, previousState) {\r\n        if (previousProps !== this.props) {\r\n          if (this.props.language === 'ar') {\r\n            this.setState({ text: text.ar });\r\n          } else {\r\n            this.setState({ text: text.en });\r\n          }\r\n        }\r\n      }\r\n    \r\n      changeLanguage = e => {\r\n        e.preventDefault();\r\n        this.props.changeLang(e.target.id);\r\n      };\r\n    \r\n      componentDidMount() {\r\n        window.scrollTo(0, 0);\r\n        this.checklang();\r\n      }\r\n      \r\n        render() {\r\n      return (\r\n        <div className=\"dates\">\r\n            <h1> {this.state.text.dates}</h1>\r\n        </div>\r\n\r\n      )\r\n        }\r\n    }\r\n\r\n    Dates.propTypes = {\r\n        changeLang: PropTypes.func.isRequired\r\n      };\r\n    \r\n    const mapStateToProps = (state) => {\r\n        return {\r\n            applicantsData: state.applicants,\r\n            language: state.lang.language\r\n        };\r\n      };\r\n    \r\n      const mapDispatchToProps = (dispatch) => {\r\n        return {\r\n            changeLang:()=> dispatch(changeLang())\r\n        };\r\n      };\r\n      export default connect(mapStateToProps, mapDispatchToProps)(withRouter(Dates));\r\n    ","import {\r\n    FETCH_APPLICANTS_REQUEST,\r\n    FETCH_APPLICANTS_SUCCESS,\r\n    FETCH_APPLICANTS_FAILURE\r\n  } from \"./ApplicantsActiontypes\";\r\n\r\n  const initialState = {\r\n    loading: false,\r\n    applicants: [],\r\n    error: \"\",\r\n  };\r\n\r\n  const reducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case  FETCH_APPLICANTS_REQUEST:\r\n          return {\r\n            ...state,\r\n            loading: true,\r\n            \r\n          };\r\n\r\n          case  FETCH_APPLICANTS_SUCCESS:\r\n            return {\r\n              loading: false,\r\n              applicants: action.payload,\r\n              error: \"\",\r\n            };\r\n\r\n            \r\n    case  FETCH_APPLICANTS_FAILURE:\r\n        return {\r\n          loading: false,\r\n          applicants: [],\r\n          error: action.payload,\r\n        };\r\n\r\n        default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;","import { CHANGE_LANG } from './LangActionType';\r\n\r\nconst initialState = {\r\n  language: 'en'\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case CHANGE_LANG:\r\n      return {\r\n        ...state,\r\n        language: action.payload\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport applicantReducer from './Applicants/ApplicantsReducer';\r\nimport langReducer from './Language/LangReducer';\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    applicants: applicantReducer,\r\n    lang: langReducer,\r\n \r\n  });\r\n  \r\n  export default rootReducer;\r\n","\r\n\r\nimport {createStore, applyMiddleware} from 'redux';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './RootReducer';\r\n\r\n\r\nconst store= createStore(rootReducer,\r\n    composeWithDevTools(applyMiddleware(thunk)))\r\nexport default store\r\n","\nimport './App.css';\nimport React, { Component } from 'react';\nimport Navbar from '../src/Components/Navbar';\nimport {BrowserRouter as Router , Switch ,Route} from 'react-router-dom';\nimport Applicants from '../src/Pages/Applicants';\nimport Dates from '../src/Pages/Dates';\nimport {changeLang} from './Redux/Language/LangAction';\nimport store from './Redux/Store';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nif (localStorage.chosenLanguage) {\n  store.dispatch(changeLang(localStorage.chosenLanguage));\n}\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { dir: 'ltr' };\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    if (previousProps !== this.props) {\n      if (this.props.language === 'ar') {\n        this.setState({ dir: 'rtl' });\n      } else {\n        this.setState({ dir: 'ltr' });\n      }\n    }\n  }\n  render() {\n    return (\n    <>\n    <Router>\n    <div\n          className={\n            ' App ' + (this.props.language === 'en' ? '' : 'arabicFont')\n          }\n        >\n    <Navbar />\n    <Switch>\n      <Route path=\"/\" exact component={Applicants} />\n      <Route path=\"/date\" component={Dates} />\n    </Switch>\n    </div>\n    </Router>\n   \n    </>\n  );\n}\n}\nApp.propTypes = {\n  changeLang: PropTypes.func.isRequired\n};\nconst mapStateToProps = state => ({\n  language: state.lang.language\n});\nexport default connect(mapStateToProps, { changeLang })(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from \"./Redux/Store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  \n  <Provider store={store}>\n        <App />\n    </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}